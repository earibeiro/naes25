"""
Django settings for Athena project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ CONFIGURAÇÕES DE AMBIENTE
DEBUG = os.environ.get('DEBUG', 'False') == 'True'
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-)&($w&%4f*50780q86o_55c-9e_3ij7#+_6s7)0rsnv!ur%ekw')

# ✅ HOSTS PERMITIDOS
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '*.appspot.com',  # Google Cloud App Engine
    'athena-lgpd.appspot.com',  # Seu domínio específico
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages.apps.PagesConfig',
    'usuarios.apps.UsuariosConfig',
    'auditoria.apps.AuditoriaConfig',
    'crispy_forms',
    'crispy_bootstrap4',
]

# ✅ DJANGO DEBUG TOOLBAR - APENAS EM DEBUG
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
]

# ✅ DEBUG TOOLBAR MIDDLEWARE - APÓS CommonMiddleware
if DEBUG:
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']

MIDDLEWARE += [
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'auditoria.middleware.RequestStoreMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ✅ INTERNAL IPS PARA DEBUG TOOLBAR
if DEBUG:
    INTERNAL_IPS = ["127.0.0.1", "localhost"]

ROOT_URLCONF = 'Athena.Athena.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Athena.Athena.wsgi.application'

# ✅ DATABASE - Manter PostgreSQL Supabase
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "postgres",
        "USER": "postgres.vcmafdafcmtlrvcxpxlz",
        "PASSWORD": "wN5vJ&A6Aq3E6he",
        "HOST": "aws-0-sa-east-1.pooler.supabase.com",
        "PORT": "6543",
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True
USE_L10N = True

DATE_FORMAT = 'd/m/Y'
DATETIME_FORMAT = 'd/m/Y H:i'
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = '.'
DECIMAL_SEPARATOR = ','

# ✅ STATIC FILES - Configuração para produção
STATIC_URL = '/static/'

if DEBUG:
    # Desenvolvimento
    STATICFILES_DIRS = [
        BASE_DIR.parent / 'static',
    ]
else:
    # Produção - Google Cloud
    STATIC_ROOT = BASE_DIR / 'staticfiles'

# ✅ CONFIGURAÇÕES DE SEGURANÇA PARA PRODUÇÃO
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# URLs de redirecionamento
LOGIN_URL = "usuarios:login"
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home"

# Message Tags
MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# ✅ LOGGING CORRIGIDO - COMPATÍVEL COM WINDOWS E GOOGLE CLOUD
import platform

# Determinar diretório de logs baseado no sistema operacional
if platform.system() == 'Windows':
    # Windows - usar diretório temp do usuário
    LOG_DIR = os.path.join(os.environ.get('TEMP', 'C:\\temp'), 'athena_logs')
else:
    # Linux/Unix/Google Cloud - usar /tmp
    LOG_DIR = '/tmp'

# Criar diretório de logs se não existir (apenas para Windows)
if platform.system() == 'Windows' and not os.path.exists(LOG_DIR):
    try:
        os.makedirs(LOG_DIR, exist_ok=True)
    except:
        LOG_DIR = BASE_DIR / 'logs'  # Fallback para pasta do projeto
        os.makedirs(LOG_DIR, exist_ok=True)

# Configuração de logging apenas para produção
if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': os.path.join(LOG_DIR, 'django.log'),
                'formatter': 'verbose',
            },
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'root': {
            'handlers': ['console'],
        },
        'loggers': {
            'django': {
                'handlers': ['file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
            'auditoria': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
else:
    # Desenvolvimento - logging simples
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
        },
    }
