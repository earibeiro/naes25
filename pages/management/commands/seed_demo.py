from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from pages.models import Person, Company, Contract, State, City
import random

class Command(BaseCommand):
    help = 'Cria dados de demonstra√ß√£o para o sistema Athena'

    def handle(self, *args, **options):
        self.stdout.write('üå± CRIANDO DADOS DE DEMONSTRA√á√ÉO')
        self.stdout.write('=' * 50)
        
        # Criar usu√°rio demo se n√£o existir
        user, created = User.objects.get_or_create(
            username='demo',
            defaults={
                'email': 'demo@athena.com',
                'first_name': 'Usu√°rio',
                'last_name': 'Demo'
            }
        )
        
        if created:
            user.set_password('demo123')
            user.save()
            self.stdout.write(self.style.SUCCESS('‚úÖ Usu√°rio demo criado (demo/demo123)'))
        else:
            self.stdout.write('‚ÑπÔ∏è Usu√°rio demo j√° existe')
        
        # Criar estados e cidades se n√£o existirem
        try:
            estado_sp, created = State.objects.get_or_create(
                name='S√£o Paulo',
                abbreviation='SP'
            )
            
            cidade_sp, created = City.objects.get_or_create(
                name='S√£o Paulo',
                state=estado_sp
            )
            
            if created:
                self.stdout.write('‚úÖ Estado e cidade criados')
        except Exception as e:
            cidade_sp = None
            self.stdout.write(f'‚ö†Ô∏è Erro ao criar estado/cidade: {e}')
        
        # Criar empresas demo
        empresas_dados = [
            ('Tech Solutions Ltda', 'Tech Solutions'),
            ('Data Corp S.A.', 'Data Corp'),
            ('Innovation Systems Ltda', 'Innovation Systems'),
            ('Digital Services Pro Ltda', 'Digital Pro')
        ]
        
        empresas = []
        for razao_social, nome_fantasia in empresas_dados:
            # Gerar CNPJ fake v√°lido
            cnpj = f'{random.randint(10,99)}.{random.randint(100,999)}.{random.randint(100,999)}/{random.randint(1000,9999)}-{random.randint(10,99)}'
            
            empresa, created = Company.objects.get_or_create(
                corporate_name=razao_social,  # ‚úÖ CAMPO CORRETO
                usuario=user,
                defaults={
                    'trade_name': nome_fantasia,
                    'cnpj': cnpj,
                    'email': f'contato@{nome_fantasia.lower().replace(" ", "")}.com',
                    'phone': f'({random.randint(10,99)}) {random.randint(1000,9999)}-{random.randint(1000,9999)}',
                    'address': f'Rua das Empresas, {random.randint(100,999)}',
                    'city': cidade_sp,
                    'data_processing_purpose': f'Processamento de dados da empresa {nome_fantasia} para fins comerciais e LGPD.'
                }
            )
            empresas.append(empresa)
            if created:
                self.stdout.write(f'‚úÖ Empresa criada: {razao_social}')
        
        # Criar pessoas demo
        pessoas_dados = [
            ('Jo√£o Silva', 'joao@email.com', '1990-01-15'),
            ('Maria Santos', 'maria@email.com', '1985-03-22'),
            ('Pedro Oliveira', 'pedro@email.com', '1992-07-10'),
            ('Ana Costa', 'ana@email.com', '1988-11-05'),
            ('Carlos Ferreira', 'carlos@email.com', '1995-09-30')
        ]
        
        pessoas = []
        for nome, email, nascimento in pessoas_dados:
            # Gerar CPF fake v√°lido
            cpf = f'{random.randint(100,999)}.{random.randint(100,999)}.{random.randint(100,999)}-{random.randint(10,99)}'
            
            pessoa, created = Person.objects.get_or_create(
                full_name=nome,  # ‚úÖ CAMPO CORRETO
                usuario=user,
                defaults={
                    'cpf': cpf,
                    'phone': f'({random.randint(10,99)}) {random.randint(1000,9999)}-{random.randint(1000,9999)}',
                    'birth_date': nascimento,
                    'address': f'Rua das Pessoas, {random.randint(100,999)}',
                    'city': cidade_sp,
                    'data_processing_purpose': f'Processamento de dados pessoais de {nome} para fins contratuais e LGPD.'
                }
            )
            pessoas.append(pessoa)
            if created:
                self.stdout.write(f'‚úÖ Pessoa criada: {nome}')
        
        # Criar contratos demo
        contratos_titulos = [
            'Contrato de Presta√ß√£o de Servi√ßos LGPD',
            'Termo de Consentimento para Tratamento de Dados',
            'Acordo de Processamento de Dados Pessoais',
            'Contrato de Consultoria em Privacidade',
            'Termo de Uso de Plataforma Digital',
            'Contrato de Desenvolvimento de Software',
            'Acordo de Compartilhamento de Dados',
            'Termo de Autoriza√ß√£o para Marketing',
        ]
        
        contratos_descricoes = [
            'Contrato para presta√ß√£o de servi√ßos com tratamento de dados pessoais conforme LGPD.',
            'Documento formal de consentimento para coleta e processamento de dados.',
            'Acordo espec√≠fico para definir responsabilidades no tratamento de dados.',
            'Contrato para servi√ßos especializados em adequa√ß√£o √† LGPD.',
            'Termos e condi√ß√µes para uso de plataforma digital.',
            'Contrato para desenvolvimento com cl√°usulas de prote√ß√£o de dados.',
            'Acordo para compartilhamento seguro de informa√ß√µes.',
            'Autoriza√ß√£o para atividades de marketing direto.',
        ]
        
        for i, titulo in enumerate(contratos_titulos):
            empresa = random.choice(empresas) if empresas else None
            pessoa = random.choice(pessoas) if pessoas else None
            
            # Valores poss√≠veis para contract_type (verificar se existe no modelo)
            tipos_contrato = ['SERVICO', 'CONSULTORIA', 'FORNECIMENTO', 'TRABALHO', 'MARKETING', 'DESENVOLVIMENTO']
            
            # Data aleat√≥ria dos √∫ltimos 60 dias
            data_inicio = timezone.now() - timedelta(days=random.randint(1, 60))
            data_fim = data_inicio + timedelta(days=random.randint(30, 365))
            
            contrato, created = Contract.objects.get_or_create(
                title=titulo,
                usuario=user,
                defaults={
                    'description': contratos_descricoes[i] if i < len(contratos_descricoes) else 'Contrato de exemplo para demonstra√ß√£o do sistema.',
                    'contract_type': random.choice(tipos_contrato),
                    'start_date': data_inicio.date(),
                    'end_date': data_fim.date(),
                    'value': round(random.uniform(1000, 50000), 2),
                    'company': empresa,
                    'person': pessoa,
                    'is_active': random.choice([True, True, True, False]),  # 75% ativos
                    'data_processing_purpose': f'Finalidade espec√≠fica do contrato: {titulo.lower()}',
                    'created_at': data_inicio,
                }
            )
            
            if created:
                self.stdout.write(f'‚úÖ Contrato criado: {titulo[:50]}...')
        
        # Estat√≠sticas finais
        total_pessoas = Person.objects.filter(usuario=user).count()
        total_empresas = Company.objects.filter(usuario=user).count()
        total_contratos = Contract.objects.filter(usuario=user).count()
        
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üìä RESUMO DOS DADOS CRIADOS')
        self.stdout.write('=' * 60)
        self.stdout.write(f'üë• Pessoas: {total_pessoas}')
        self.stdout.write(f'üè¢ Empresas: {total_empresas}')
        self.stdout.write(f'üìã Contratos: {total_contratos}')
        self.stdout.write(f'üë§ Usu√°rio: {user.username} (senha: demo123)')
        self.stdout.write('\nüéâ Dados de demonstra√ß√£o criados com sucesso!')
        self.stdout.write('üí° Use estes dados para testar o sistema Athena.')
        self.stdout.write('\nüîó Acesse: http://127.0.0.1:8000/home/')