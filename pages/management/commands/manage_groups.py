from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group
from usuarios.signals import assign_user_to_group, remove_user_from_group, get_user_groups


class Command(BaseCommand):
    """
    Comando para gerenciar grupos de usu√°rios
    
    Uso:
    python manage.py manage_groups --list-users
    python manage.py manage_groups --add-user admin funcionario
    python manage.py manage_groups --remove-user user1 empresa_admin
    python manage.py manage_groups --list-groups user1
    """
    
    help = 'Gerencia grupos de usu√°rios no sistema'
    
    def add_arguments(self, parser):
        parser.add_argument('--list-users', action='store_true', help='Lista todos os usu√°rios e seus grupos')
        parser.add_argument('--list-groups', help='Lista grupos de um usu√°rio espec√≠fico')
        parser.add_argument('--add-user', nargs=2, metavar=('USERNAME', 'GROUP'), help='Adiciona usu√°rio a um grupo')
        parser.add_argument('--remove-user', nargs=2, metavar=('USERNAME', 'GROUP'), help='Remove usu√°rio de um grupo')
        parser.add_argument('--create-groups', action='store_true', help='Cria grupos necess√°rios')
    
    def handle(self, *args, **options):
        
        if options['list_users']:
            self.list_all_users()
        
        elif options['list_groups']:
            self.list_user_groups(options['list_groups'])
        
        elif options['add_user']:
            username, group_name = options['add_user']
            self.add_user_to_group(username, group_name)
        
        elif options['remove_user']:
            username, group_name = options['remove_user']
            self.remove_user_from_group(username, group_name)
        
        elif options['create_groups']:
            self.create_required_groups()
        
        else:
            self.stdout.write(self.style.WARNING('Use --help para ver as op√ß√µes dispon√≠veis'))
    
    def list_all_users(self):
        """Lista todos os usu√°rios e seus grupos"""
        self.stdout.write(self.style.SUCCESS('üìã USU√ÅRIOS E GRUPOS'))
        self.stdout.write('=' * 60)
        
        for user in User.objects.all().order_by('username'):
            groups = get_user_groups(user)
            status = "üî¥ Superuser" if user.is_superuser else "üë§ Regular"
            groups_str = ', '.join(groups) if groups else 'Nenhum grupo'
            
            self.stdout.write(f"{status} {user.username} ({user.email})")
            self.stdout.write(f"   üè∑Ô∏è Grupos: {groups_str}")
            self.stdout.write('')
    
    def list_user_groups(self, username):
        """Lista grupos de um usu√°rio espec√≠fico"""
        try:
            user = User.objects.get(username=username)
            groups = get_user_groups(user)
            
            self.stdout.write(self.style.SUCCESS(f'üë§ Usu√°rio: {username}'))
            self.stdout.write(f'üìß Email: {user.email}')
            self.stdout.write(f'üîê Superuser: {"Sim" if user.is_superuser else "N√£o"}')
            self.stdout.write(f'üè∑Ô∏è Grupos: {", ".join(groups) if groups else "Nenhum grupo"}')
            
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå Usu√°rio "{username}" n√£o encontrado'))
    
    def add_user_to_group(self, username, group_name):
        """Adiciona usu√°rio a um grupo"""
        try:
            user = User.objects.get(username=username)
            if assign_user_to_group(user, group_name):
                self.stdout.write(self.style.SUCCESS(f'‚úÖ Usu√°rio "{username}" adicionado ao grupo "{group_name}"'))
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao adicionar usu√°rio ao grupo'))
                
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå Usu√°rio "{username}" n√£o encontrado'))
    
    def remove_user_from_group(self, username, group_name):
        """Remove usu√°rio de um grupo"""
        try:
            user = User.objects.get(username=username)
            if remove_user_from_group(user, group_name):
                self.stdout.write(self.style.SUCCESS(f'‚úÖ Usu√°rio "{username}" removido do grupo "{group_name}"'))
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao remover usu√°rio do grupo'))
                
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå Usu√°rio "{username}" n√£o encontrado'))
    
    def create_required_groups(self):
        """Cria grupos necess√°rios"""
        required_groups = [
            ('empresa_admin', 'Administradores da empresa'),
            ('funcionario', 'Funcion√°rios do sistema')
        ]
        
        self.stdout.write(self.style.SUCCESS('üèóÔ∏è CRIANDO GRUPOS NECESS√ÅRIOS'))
        self.stdout.write('=' * 50)
        
        for group_name, description in required_groups:
            group, created = Group.objects.get_or_create(name=group_name)
            
            if created:
                self.stdout.write(self.style.SUCCESS(f'‚úÖ Grupo "{group_name}" criado'))
                self.stdout.write(f'   üìù {description}')
            else:
                self.stdout.write(self.style.WARNING(f'‚ÑπÔ∏è Grupo "{group_name}" j√° existe'))
        
        self.stdout.write('')
        self.stdout.write('üí° Use: python manage.py manage_groups --add-user <username> <group>')
        self.stdout.write('   Exemplo: python manage.py manage_groups --add-user admin empresa_admin')